import L from "leaflet";
import { ElevationMode } from "../types/elevationMode";
import { MapId, MapFloorId, MapFloorIndex } from "./map";
export declare type MarkerOptions = L.MarkerOptions & {
    elevation?: number;
    elevationMode?: ElevationMode;
    indoorMapId?: MapId;
    indoorMapFloorId?: MapFloorId;
};
declare class MarkerType extends L.Marker {
    options: MarkerOptions;
    constructor(latLng: L.LatLngExpression, options?: MarkerOptions);
    getElevation(): number;
    setElevation(elevation: number): this;
    getElevationMode(): ElevationMode;
    setElevationMode(elevationMode: ElevationMode): this;
    setIndoorMapWithFloorId(indoorMapId: MapId, indoorMapFloorId: MapFloorId): this;
    setIndoorMapWithFloorIndex(indoorMapId: MapId, indoorMapFloorIndex: MapFloorIndex): this;
    setOutdoor(): this;
}
export declare type Marker = MarkerType;
export declare const Marker: typeof MarkerType;
export declare const marker: import("../private/factoryFor").Constructor<typeof MarkerType>;
export {};
