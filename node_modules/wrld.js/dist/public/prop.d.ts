import L from "leaflet";
import { ElevationMode } from "../types/elevationMode";
import { ElevationModeType } from "../private/elevation_mode";
import { Map, MapId, MapFloorId } from "../wrld.js";
export declare type PropOptions = {
    elevation?: number;
    elevationMode?: ElevationMode;
    indoorMapId?: MapId;
    indoorMapFloorId?: MapFloorId;
    headingDegrees?: number;
};
declare type Location = Parameters<typeof L.latLng>[0];
export declare class Prop {
    private _map;
    private _name;
    private _geometryId;
    private __geometryIdNeedsChanged;
    private _location;
    private __locationNeedsChanged;
    private _indoorMapId;
    private _indoorMapFloorId;
    private _headingDegrees;
    private __headingDegreesNeedsChanged;
    private _elevation;
    private __elevationNeedsChanged;
    private _elevationMode;
    private __elevationModeNeedsChanged;
    constructor(name: string, geometryId: string, location: Location, config?: PropOptions);
    getLocation: () => L.LatLng;
    setLocation: (location: Location) => this;
    getIndoorMapId: () => MapId;
    getIndoorMapFloorId: () => MapFloorId;
    getHeadingDegrees: () => number;
    setHeadingDegrees: (headingDegrees: number) => this;
    getElevation: () => number;
    setElevation: (elevation: number) => this;
    getElevationMode: () => ElevationMode;
    setElevationMode: (elevationModeString: ElevationModeType) => this;
    getGeometryId: () => string;
    setGeometryId: (geometryId: string) => this;
    getName: () => string;
    addTo: (map: Map) => this;
    remove: () => this;
}
export declare const prop: import("../private/factoryFor").Constructor<typeof Prop>;
export {};
