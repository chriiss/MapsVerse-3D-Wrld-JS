import L from "leaflet";
import type Color from "../types/color";
import type ElevationMode from "../types/elevationMode";
import type { Map, MapFloorId, MapId } from "./map";
export declare enum HeatmapOcclusionMapFeature {
    GROUND = "ground",
    BUILDINGS = "buildings",
    TREES = "trees",
    TRANSPORT = "transport"
}
export declare type OcclusionMapFeature = "ground" | "buildings" | "trees" | "transport";
export declare type WeightedPoint = {
    latLng?: L.LatLngExpression;
    weight?: number;
};
export declare type CustomPoint = {
    [property: string]: L.LatLngExpression | number;
};
export declare type PointData = [number, number] | [number, number, number] | WeightedPoint | CustomPoint;
export declare type DensityStop = {
    stop: number;
    radius: number;
    gain: number;
};
export declare type DensityStopArray = [number, number, number];
export declare type ColorStop = {
    stop: number;
    color: Color;
};
export declare type ColorStopArray = [number, Color];
export declare type HeatmapOptions = {
    densityStops?: DensityStop[];
    densityBlend?: number;
    interpolateDensityByZoom?: boolean;
    zoomMin?: number;
    zoomMax?: number;
    weightMin?: number;
    weightMax?: number;
    colorGradient?: ColorStopArray | ColorStop[] | ColorStopArray[];
    opacity?: number;
    resolutionPixels?: number;
    intensityBias?: number;
    intensityScale?: number;
    indoorMapId?: MapId;
    indoorMapFloorId?: MapFloorId;
    elevation?: number;
    elevationMode?: ElevationMode;
    occludedMapFeatures?: OcclusionMapFeature[];
    occludedAlpha?: number;
    occludedSaturation?: number;
    occludedBrightness?: number;
    polygonPoints?: L.LatLngTuple[];
    dataCoordProperty?: string;
    dataWeightProperty?: string;
    textureBorderPercent?: number;
    useApproximation?: boolean;
};
declare class HeatmapType extends L.Layer {
    options: Required<HeatmapOptions>;
    protected _map: Map;
    protected _pointData: WeightedPoint[];
    protected _changedFlags: {
        data: boolean;
        indoorMap: boolean;
        elevation: boolean;
        densityBlend: boolean;
        interpolateDensityByZoom: boolean;
        intensityBias: boolean;
        intensityScale: boolean;
        opacity: boolean;
        colorGradient: boolean;
        resolution: boolean;
        densityStops: boolean;
        useApproximation: boolean;
        polygon: boolean;
    };
    constructor(pointData: PointData[], options?: HeatmapOptions);
    getData(): WeightedPoint[];
    getDensityStops(): DensityStop[];
    getDensityBlend(): number;
    getInterpolateDensityByZoom(): boolean;
    getZoomMin(): number;
    getZoomMax(): number;
    getWeightMin(): number;
    getWeightMax(): number;
    getColorGradient(): ColorStop[];
    getOpacity(): number;
    getResolutionPixels(): number;
    getIntensityBias(): number;
    getIntensityScale(): number;
    getIndoorMapId(): MapId;
    getIndoorMapFloorId(): MapFloorId;
    getElevation(): number;
    getElevationMode(): ElevationMode;
    getOccludedMapFeatures(): OcclusionMapFeature[];
    getOccludedAlpha(): number;
    getOccludedSaturation(): number;
    getOccludedBrightness(): number;
    getPolygonPoints(): L.LatLngTuple;
    getTextureBorderPercent(): number;
    getUseApproximation(): boolean;
    setData(pointData: PointData[]): this;
    setOptions(options: HeatmapOptions): this;
    setDensityStops(densityStops: DensityStop[]): this;
    setDensityBlend(densityBlend: number): this;
    setInterpolateDensityByZoom(interpolateDensityByZoom: boolean): this;
    setZoomMin(zoomMin: number): this;
    setZoomMax(zoomMax: number): this;
    setWeightMin(weightMin: number): this;
    setWeightMax(weightMax: number): this;
    setColorGradient(colorGradient: ColorStopArray | ColorStop[] | ColorStopArray[]): this;
    setOpacity(opacity: number): this;
    setResolution(resolutionPixels: number): this;
    setIntensityBias(intensityBias: number): this;
    setIntensityScale(intensityScale: number): this;
    setIndoorMapWithFloorId(indoorMapId: MapId, indoorMapFloorId: MapFloorId): this;
    setElevation(elevation: number): this;
    setElevationMode(mode: ElevationMode): this;
    setPolygonPoints(polygonPoints: L.LatLngTuple[] | L.LatLngTuple[][]): this;
    setUseApproximation(useApproximation: boolean): this;
    protected _getArrayDepth(array: unknown[] | unknown): number;
    protected _loadLatLngAlts(coords: L.LatLngExpression[]): L.LatLngTuple[];
    protected _loadPolygonRings(coordsArray: L.LatLngTuple[] | L.LatLngTuple[][]): L.LatLngTuple[];
    protected _loadDensityParams(densityParams: DensityStop | DensityStopArray): DensityStop;
    protected _loadDensityStops(densityStopsArray: (DensityStop | DensityStopArray) | (DensityStop | DensityStopArray)[]): DensityStop[];
    protected _loadPointData(pointData: PointData[]): WeightedPoint[];
    protected _loadColorGradient(colorGradient: ColorStopArray | ColorStop[] | ColorStopArray[]): ColorStop[];
    protected _loadColorStop(colorStop: ColorStop | ColorStopArray): ColorStop;
}
export declare type Heatmap = HeatmapType;
export declare const Heatmap: typeof HeatmapType;
export declare const heatmap: import("../private/factoryFor").Constructor<typeof HeatmapType>;
export {};
