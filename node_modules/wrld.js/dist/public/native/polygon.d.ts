import L from "leaflet";
import { Color } from "../../types/color";
import { ElevationMode } from "../../types/elevationMode";
import { Map, MapId, MapFloorId } from "./../map";
export declare type PolygonOptions = L.PolylineOptions & {
    color?: Color;
    elevation?: number;
    elevationMode?: ElevationMode;
    indoorMapId?: MapId;
    indoorMapFloorId?: MapFloorId;
};
export declare class Polygon {
    private _map;
    private _outerRing;
    private _holes;
    private _config;
    private _color;
    private __colorNeedsChanged;
    constructor(latLngs: L.LatLngTuple[] | L.LatLngTuple[][], config?: PolygonOptions);
    getColor: () => Color;
    setColor: (color: Color) => this;
    addHole: (points: Parameters<typeof loadLatLngs>[0]) => this;
    getHoles: () => L.LatLng[][];
    getPoints: () => L.LatLng[];
    addTo: (map: Map) => this;
    remove: () => this;
}
declare const loadLatLngs: (coords: Parameters<typeof L.latLng>[0][]) => L.LatLng[];
export declare const polygon: import("../../private/factoryFor").Constructor<typeof Polygon>;
export {};
